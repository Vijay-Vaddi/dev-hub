urls: 
passing request into a function makes it a view. 

models 
==========
blank=True
This is for django to know that we can, 
submit forms with nothing in them. 
null=true, is to let database know it can be null. 

by default django will create id for us so no need to define id field in models. 

 
-----

after models, makemigrations and migrate, 
but still wont be able to see in admin since
django-admin is not directly connected to the db. 

for this, 
register models in admin file. 

django models naming conventions 
table is named singular (project) and django adds 's'

can change it using meta class, verbose attr
-----------

many to many 
tag can be connected to multiple models, 
hence the relationship (project to Tag) is not defined in tag model but in Project model

==========
No form.delete(), only form.save() for creating and updating model objects.


==========
user profile model, create a new model instead of extending built in User model
-add extra required attributes like prof pic, links, social etc
- isolate from core user model
- if extended and when changing user model, if something goes wrong in User model, 
    it can be dangerous since many things are depended on core User model than custom models. 
- like authentications, security, etc 

================
{% for skill in profile.skill_set.all %}
model.child_set.all gives the child items ( _set is imp)

===========
Signals 

signals allows fire off multiple events inside our applications
for eg when a user registers, we can auto generate a profile and listen for events,
based on what happens to the user. 

in signals there is a sender and a receiver. 
once a event(action) is triggered, sender would be that action user being created,
and receiver would be the function to send email. 

1st create sender and reciver that fires off any time an event occurs
use case: create a user, then trigger a function to create a profile and connect it to user. 

**after creating signals.py
import user.signals in users.config using ready method

===============

Authentications

Django maintains sessions in its db table, 
does not delete info but erases from cookie after logout. 

profiles = Profile.objects.filter(name__icontains=search_query)
for one parameter search,
profiles = Profile.objects.filter(name__icontains=search_query, short_intro__icontains=search_query)
will not work cos this acts like AND logic. (learn more on this)

so use Q - lookup

===========
reviews, 

========

Password reset. 

Use built in stuff for password reset functions
django.contrib. auth.urls has many url patterns 
including login/logout, but use individually so that there's no clash 
between custom login/logout. might break some stuff as well. 

once password reset view is set, every other views in reset password cycle 
has to be working or it'll throw error.  

==========
API

LEARN diff between just an api and REST api. 

Serializing ManyToOne (Foreign Key) and many to many, one to many
if the model has attribute and the relationship is defined in that model    
    for example ForeignKey and ManyToMany, (its like a child) of another model 
    owner = ForeignKey(Profile) then can directly serialize 
    works for manytomany as well

else 
    user serializerMethod and use the method to get and serialize items. 

===

For authentications and authorization, can use session ids in theory
but token are better. (learn more)
use djangos simple jwt 

read customizing token in simple jwt



